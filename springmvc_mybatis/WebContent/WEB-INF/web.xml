<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
    http://java.sun.com/xml/ns/javaee
    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
	
	<!-- 
		注意：经过多次测试之后发现，
		1、这个spring配置文件不在WEB-INF目录下：
			如果在DispatcherServlet这个servlet中指定<init-param>参数的话,如果contextConfigLocation的内容不是/WEB-INF/applicationContext.xml，同时也没有指定全局<context-param>，则启动的时候会报错.会报在WEB-INF下面找不到application.xml文件.
			解决方式：
				1、在web.xml中使用全局的<context-param>进行指定，名称任意,同时需要配置springmvc所需的文件.
				2、contextConfigLocation参数指定的文件名称必须是/WEB-INF/applicationContext.xml才行.
		2、这个spring配置文件在WEB-INF目录下：
			如果名称是applicationContext.xml,同时没有spring-servlet.xml的话，虽然启动的时候没有报错，但是当访问一个springmvc拦截的请求的时候，会报
				Could not open ServletContext resource [/WEB-INF/spring-servlet.xml]这说明spring找不到默认的配置文件
			如果名称是spring-servlet.xml的话：
				1、如果没有全局指定<context-param>指向配置文件，启动的时候会报找不到/WEB-INF/applicationContext.xml文件
				2、如果也指定了全局<context-param>指向配置文件,启动不会报错。访问也正常
		
		经过上面叙述，有几种配置方式：
		1、在web.xml中配置全局<context-param>参数，同时在spring的servlet的配置中指定springmvc所需的文件
		2、在	spring的servlet中的<init-param>进行指定配置文件.文件名称如果是applicationContext.xml,,则无需配置全局<context-param>,,
			如果不是applicationContext.xml,,则需要配置全局<context-param>,,同时给框架指定springmvc和spring默认的2个配置文件
	 -->
	 
	<!-- 这个全局配置还是有意思的~~~看上面说明 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext.xml</param-value>
	</context-param>
	
	<!-- Spring核心监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- Spring控制器 -->
	<servlet>
		<servlet-name>spring</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		
		<!-- 不指定 <init-param> 会自动找web.xml相同路径下 spring-servlet.xml文件 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/applicationContext.xml</param-value>
		</init-param>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- Spring防止内存泄漏 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!-- spring编码过滤器 -->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
</web-app>